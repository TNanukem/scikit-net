import pandas as pd
from node2vec import Node2Vec
from abc import ABCMeta, abstractmethod


class BaseConstructor(metaclass=ABCMeta):
    """
    """
    def __init__(self):
        pass

    def set_params(self, **parameters):
        for parameter, value in parameters.items():
            setattr(self, parameter, value)
        return self

    @abstractmethod
    def fit(self):
        pass

    def fit_transform(self, G):
        """Fit the constructor creating the dataset and returning it.

        Parameters
        ----------
        G_ : NetworkX graph
            The network to be transformed into a dataset

        Returns
        -------
        df_ : Pandas DataFrame
            The dataframe with the generated features from the network
        """
        self.fit(G)
        return self.df_


class Node2VecConstructor(BaseConstructor):
    """
    Creates pandas DataFrame from a complex network by generating the node2vec
    embeddings of the network.

    Parameters
    ----------
    d : int
        Dimension of the embedding.
    walk_length : int
        Length of the random walk, i.e, the number of nodes visited.
    num_walks : int
        Number of walks per node.
    p : float
        Return parameter for node2vec.
    q : float
        In-out parameter for node2vec.
    weight_key : str
        Key of the edge attribute to be used as the weight of the edges
        if the network is weighted.
    n_jobs : int
        Number of parallel jobs to be used by node2vec.
    random_state : int
        Random seed to be used by node2vec.

    Examples
    --------
    >>> import networkx as nx
    >>> from sknet.network_construction import Node2VecConstructor
    >>> constructor = Node2VecConstructor()
    >>> G = nx.karate_club_graph()
    >>> df_ = constructor.fit_transform(G)

    References
    ----------
    Grover, Aditya & Leskovec, Jure. (2016). node2vec: Scalable Feature
    Learning for Networks. KDD : proceedings. International Conference
    on Knowledge Discovery & Data Mining. 2016. 855-864.
    10.1145/2939672.2939754.
    """
    def __init__(self, d=128, walk_length=20, num_walks=5,
                 p=1, q=1, weight_key='weight',
                 n_jobs=1, random_state=42):
        self.d = d
        self.walk_length = walk_length
        self.num_walks = num_walks
        self.p = p
        self.q = q
        self.weight_key = weight_key
        self.n_jobs = n_jobs
        self.random_state = random_state

    def get_params(self):
        return {
            'd': self.d,
            'walk_length': self.walk_length,
            'num_walks': self.num_walks,
            'p': self.p,
            'q': self.q,
            'weight_key': self.weight_key,
            'n_jobs': self.n_jobs,
            'random_state': self.random_state
        }

    def fit(self, G, **kwargs):
        """
        Fit the constructor creating the dataset.

        Accepts any parameters accepted by gensim.Word2Vec except
        dimensions and workers.

        """
        n2v = Node2Vec(graph=G, dimensions=self.d,
                       walk_lenght=self.walk_length,
                       num_walks=self.num_walks,
                       p=self.p, q=self.q,
                       weight_key=self.weight_key,
                       workers=self.n_jobs,
                       seed=self.random_state)

        model = n2v.fit(**kwargs)

        self.n_features_ = model.wv.vectors.shape[1]
        self.df_ = pd.DataFrame(
            model.wv.vectors,
            index=G.nodes(),
            columns=[f'Feature {x}' for x in range(len(self.n_features_))])

        return self

    def get_dataset(self):
        """Return the dataset generated by the constructor."""
        return self.df_
